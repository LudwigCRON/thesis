%!PS-Adobe-3.0 EPSF-3.0
%%Title: sd-noise-shaping.ps
%%Creator: XCircuit v3.9 rev73
%%CreationDate: Tue Jun 26 14:58:20 2018
%%Pages: 1
%%BoundingBox: 68 68 563 200
%%DocumentNeededResources: font Helvetica 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.9
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--4/12/16  (tim@opencircuitdesign.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-2012)
%  Open Circuit Design (2012-2016)
%
%%BeginResource: procset XCIRCproc 3.9 1
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { count 0 gt { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } if } def
/ol { count 0 gt { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/MR { /twidth exch def } def
/CRx { } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto CRx } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg
	/rotval exch def /twidth 100000 def /just exch def just 128 and
	0 gt {/mshow {pop} def} {/mshow {show} def} ifelse just 16 and 0
	gt {gsave rotval rotate 0 1 dtransform gsave pagemat setmatrix
	idtransform exch grestore 1 0 dtransform gsave pagemat setmatrix
	idtransform exch grestore dup abs 1e-9 lt {pop mul 0 gt} {3 1 roll
	pop pop 0 lt} ifelse grestore {-1 /rotval rotval neg def /just just
	dup 3 and 1 ne {3 xor} if def} {1} ifelse exch -1e-9 lt {-1 /rotval
	rotval neg def /just just dup 12 and 4 ne {12 xor} if def} {1}
	ifelse scale } if /showflag 0 def /fspc pspc def /Bline 0 def
	/numlines 0 def /padding 0 array def /Tabs 0 array def
	/fscale 1.0 def /kY 0 def gsave /CRx { linewid padding
	aload pop numlines 1 add dup /numlines exch def array astore
	/padding exch def /linewid 0 def } def dup 1 add copy dup 1 0
	dtransform exch atan rotate {exch dup type /stringtype eq {gsave dup
	gsave newpath 0 0 moveto true charpath flattenpath pathbbox pop exch
	pop exch pop grestore currentpoint pop add dup /linewid exch def twidth
	ge {grestore CR exch 1 add dup 2 add {CR} exch 1 roll exch} {grestore}
	ifelse true charpath flattenpath} {dup type /arraytype eq {exec} {12
	string cvs true charpath flattenpath} ifelse} ifelse} repeat
	CRx /CRx {padding aload pop just 1280 and 0 gt {blockwid exch sub just
	1024 and 0 gt {0.5 mul} if} {pop 0} ifelse 0 rmoveto numlines 1 sub
	dup /numlines exch def array astore /padding exch def} def exch pop
	pathbbox grestore 4 copy pop exch pop exch sub /blockwid exch def
	3 -1 roll pop 3 1 roll just 1 and 0 gt {just 2 and
	0 gt {exch pop neg fspc sub} {exch sub 0.5 mul neg} ifelse} {pop neg
	fspc add} ifelse exch Bline exch just 4 and 0 gt {just 8 and 0 gt
	{exch pop neg fspc sub} {add 0.5 mul neg} ifelse} {pop neg fspc add}
	ifelse rotval rotate Kn currentpoint translate /showflag 1 def /Bline
	0 def /Tabs 0 array def /fscale 1.0 def /kY 0 def CRx {dup type
	/stringtype eq {mshow} {dup type /arraytype eq {exec} {12 string cvs
	mshow} ifelse} ifelse} repeat grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce translate 0 0 moveto neg rotate dup type /nametype
	eq not { dup abs currentlinewidth exch div setlinewidth } { pop }
	ifelse dup abs scale clipped 1 and 1 eq {/clipped clipped 1 add def}
	if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap 0 setlinejoin} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt 
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def     

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 2 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog
% XCircuit output starts here.

%%BeginSetup

/generic::arrowhead {
% nonetwork
begingate
8 -28 beginpath
3 -18 3 -15 0 0 curveto
-3 -15 -3 -18 -8 -28 curveto
-2 -26 2 -26 8 -28 curveto
249 
1.000 endpath
endgate
} def


%%EndSetup

%%Page: sd-noise-shaping 1
%%PageOrientation: Portrait
/pgsave save def bop
% 32.00 4.00 gridspace
1.0000 inchscale
2.6000 setlinewidth 215 252 translate

1.000 90.000 304 0 generic::arrowhead
1.000 0.000 0 272 generic::arrowhead
1 1.000 0 0 288 0 2 polygon
1 1.000 0 0 0 256 2 polygon
(Frequency) {/Helvetica cf} 2 16 0.000 0.500 84 -56 label
(Power) {/Helvetica cf} 2 16 270.000 0.500 -8 104 label
0 1.000 8 64 8 0 16 0 16 64 4 polygon
0 1.000 16 72 16 0 24 0 24 72 4 polygon
0 1.000 24 60 24 0 32 0 32 60 4 polygon
0 1.000 32 68 32 0 40 0 40 68 4 polygon
0 1.000 40 64 40 0 48 0 48 64 4 polygon
0 1.000 48 204 48 0 56 0 56 204 4 polygon
0 1.000 56 60 56 0 64 0 64 60 4 polygon
0 1.000 64 68 64 0 72 0 72 68 4 polygon
0 1.000 72 64 72 0 80 0 80 64 4 polygon
0 1.000 80 72 80 0 88 0 88 72 4 polygon
0 1.000 88 60 88 0 96 0 96 60 4 polygon
0 1.000 96 68 96 0 104 0 104 68 4 polygon
0 1.000 104 64 104 0 112 0 112 64 4 polygon
0 1.000 112 72 112 0 120 0 120 72 4 polygon
0 1.000 120 60 120 0 128 0 128 60 4 polygon
0 1.000 128 68 128 0 136 0 136 68 4 polygon
3 0.500 0 64 288 64 2 polygon
(s) {ss} (F) {/Helvetica cf} 4 16 0.000 0.500 116 -32 label
(/2) {/Helvetica cf} 2 16 0.000 0.500 136 -32 label
1 1.000 264 4 264 -8 2 polygon
1 1.000 136 0 136 -8 2 polygon
(s) {ss} (F) {/Helvetica cf} 4 16 0.000 0.500 256 -32 label
(average) {/Helvetica cf} 2 16 0.000 0.500 296 72 label
(noise floor) {/Helvetica cf} 2 16 0.000 0.500 288 48 label
(signal) {/Helvetica cf} 2 16 0.000 0.500 76 220 label
1 0.500 56 224 52 224 52 208 64 224 spline
1 0.500 52 208 56 212 2 polygon
1 0.500 52 208 48 212 2 polygon
1.000 90.000 752 0 generic::arrowhead
1.000 0.000 448 272 generic::arrowhead
1 1.000 448 0 736 0 2 polygon
1 1.000 448 0 448 256 2 polygon
(Frequency) {/Helvetica cf} 2 16 0.000 0.500 532 -56 label
(Power) {/Helvetica cf} 2 16 270.000 0.500 440 104 label
0 1.000 456 32 456 0 464 0 464 32 4 polygon
0 1.000 464 40 464 0 472 0 472 40 4 polygon
0 1.000 472 28 472 0 480 0 480 28 4 polygon
0 1.000 480 36 480 0 488 0 488 36 4 polygon
0 1.000 496 204 496 0 504 0 504 204 4 polygon
3 0.500 448 32 736 32 2 polygon
(s) {ss} (F) {/Helvetica cf} 4 16 0.000 0.500 580 -32 label
(/2) {/Helvetica cf} 2 16 0.000 0.500 600 -32 label
1 1.000 712 4 712 -8 2 polygon
1 1.000 584 0 584 -8 2 polygon
(s) {ss} (F) {/Helvetica cf} 4 16 0.000 0.500 712 -32 label
(average) {/Helvetica cf} 2 16 0.000 0.500 744 40 label
(noise floor) {/Helvetica cf} 2 16 0.000 0.500 736 16 label
(signal) {/Helvetica cf} 2 16 0.000 0.500 524 220 label
1 0.500 504 224 500 224 500 208 512 224 spline
1 0.500 500 208 504 212 2 polygon
1 0.500 500 208 496 212 2 polygon
0 1.000 488 32 488 0 496 0 496 32 4 polygon
0 1.000 504 28 504 0 512 0 512 28 4 polygon
0 1.000 512 36 512 0 520 0 520 36 4 polygon
0 1.000 520 32 520 0 528 0 528 32 4 polygon
0 1.000 528 40 528 0 536 0 536 40 4 polygon
0 1.000 536 28 536 0 544 0 544 28 4 polygon
0 1.000 544 36 544 0 552 0 552 36 4 polygon
0 1.000 552 32 552 0 560 0 560 32 4 polygon
0 1.000 560 40 560 0 568 0 568 40 4 polygon
0 1.000 568 28 568 0 576 0 576 28 4 polygon
0 1.000 576 36 576 0 584 0 584 36 4 polygon
(M) {/Helvetica cf} 2 16 0.000 0.500 692 -32 label
(M) {/Helvetica cf} 2 16 0.000 0.500 560 -32 label
1.000 90.000 1200 0 generic::arrowhead
1.000 0.000 896 272 generic::arrowhead
1 1.000 896 0 1184 0 2 polygon
1 1.000 896 0 896 256 2 polygon
(Frequency) {/Helvetica cf} 2 16 0.000 0.500 980 -56 label
(Power) {/Helvetica cf} 2 16 270.000 0.500 888 104 label
0 1.000 904 8 904 0 912 0 912 8 4 polygon
0 1.000 912 12 912 0 920 0 920 12 4 polygon
0 1.000 920 8 920 0 928 0 928 8 4 polygon
0 1.000 928 12 928 0 936 0 936 12 4 polygon
0 1.000 944 204 944 0 952 0 952 204 4 polygon
3 0.500 896 32 1184 32 2 polygon
(s) {ss} (F) {/Helvetica cf} 4 16 0.000 0.500 1028 -32 label
(/2) {/Helvetica cf} 2 16 0.000 0.500 1048 -32 label
1 1.000 1160 4 1160 -8 2 polygon
1 1.000 1032 0 1032 -8 2 polygon
(s) {ss} (F) {/Helvetica cf} 4 16 0.000 0.500 1160 -32 label
(average) {/Helvetica cf} 2 16 0.000 0.500 1192 40 label
(noise floor) {/Helvetica cf} 2 16 0.000 0.500 1184 16 label
(signal) {/Helvetica cf} 2 16 0.000 0.500 972 220 label
1 0.500 952 224 948 224 948 208 960 224 spline
1 0.500 948 208 952 212 2 polygon
1 0.500 948 208 944 212 2 polygon
0 1.000 936 8 936 0 944 0 944 8 4 polygon
0 1.000 952 12 952 0 960 0 960 12 4 polygon
0 1.000 960 16 960 0 968 0 968 16 4 polygon
0 1.000 968 12 968 0 976 0 976 12 4 polygon
0 1.000 976 20 976 0 984 0 984 20 4 polygon
0 1.000 984 28 984 0 992 0 992 28 4 polygon
0 1.000 992 36 992 0 1000 0 1000 36 4 polygon
0 1.000 1000 44 1000 0 1008 0 1008 44 4 polygon
0 1.000 1008 48 1008 0 1016 0 1016 48 4 polygon
0 1.000 1016 52 1016 0 1024 0 1024 52 4 polygon
0 1.000 1024 52 1024 0 1032 0 1032 52 4 polygon
(M) {/Helvetica cf} 2 16 0.000 0.500 1140 -32 label
(M) {/Helvetica cf} 2 16 0.000 0.500 1008 -32 label
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
