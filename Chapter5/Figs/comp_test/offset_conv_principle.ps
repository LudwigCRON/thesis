%!PS-Adobe-3.0 EPSF-3.0
%%Title: offset_conv_principle.ps
%%Creator: XCircuit v3.8 rev17
%%CreationDate: Mon Nov 07 11:01:23 2016
%%Pages: 1
%%BoundingBox: 68 68 637 306
%%DocumentNeededResources: font Helvetica Helvetica-Oblique Symbol
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.8
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--11/1/10  (tim.edwards@multigig.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-2012)
%
%%BeginResource: procset XCIRCproc 3.8 0
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0]
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { dup type /stringtype eq showflag 1 eq and { gsave
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } def
/ol { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/MR { /twidth exch def } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg
	/rotval exch def /twidth 100000 def /just exch def just 384 and
	0 gt {/mshow {pop} def} {/mshow {show} def} ifelse just 16 and 0
	gt {gsave rotval rotate 0 1 dtransform gsave pagemat setmatrix
	idtransform exch grestore 1 0 dtransform gsave pagemat setmatrix
	idtransform exch grestore dup abs 1e-9 lt {pop mul 0 gt} {3 1 roll
	pop pop 0 lt} ifelse grestore {-1 /rotval rotval neg def /just just
	dup 3 and 1 ne {3 xor} if def} {1} ifelse exch -1e-9 lt {-1 /rotval
	rotval neg def /just just dup 12 and 4 ne {12 xor} if def} {1}
	ifelse scale } if /showflag 0 def /fspc pspc def /Bline 0 def /Tabs
	0 array def /fscale 1.0 def /kY 0 def gsave dup 1 add copy dup
	1 0 dtransform exch atan rotate {exch dup type /stringtype eq {gsave
        dup gsave newpath 0 0 moveto true charpath flattenpath pathbbox pop
	exch pop exch pop grestore currentpoint pop add twidth
	ge {grestore CR exch 1 add dup 2 add {CR} exch 1 roll exch} {grestore}
	ifelse true charpath flattenpath} {dup type /arraytype eq {exec} {12
	string cvs true charpath flattenpath} ifelse} ifelse} repeat exch pop
	pathbbox grestore 3 -1 roll pop 3 1 roll just 1 and 0 gt {just 2 and
	0 gt {exch pop neg fspc sub} {exch sub 0.5 mul neg} ifelse} {pop neg
	fspc add} ifelse exch Bline exch just 4 and 0 gt {just 8 and 0 gt
	{exch pop neg fspc sub} {add 0.5 mul neg} ifelse} {pop neg fspc add}
	ifelse rotval rotate Kn currentpoint translate /showflag 1 def /Bline
	0 def /Tabs 0 array def /fscale 1.0 def /kY 0 def {dup type
	/stringtype eq {mshow} {dup type /arraytype eq {exec} {12 string cvs
	mshow} ifelse} ifelse} repeat grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce translate 0 0 moveto neg rotate dup type /nametype
	eq not { dup abs currentlinewidth exch div setlinewidth } { pop }
	ifelse dup abs scale clipped 1 and 1 eq {/clipped clipped 1 add def}
	if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap 0 setlinejoin} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 2 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 2 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog

% XCircuit output starts here.

%%BeginSetup

/generic::arrowhead {
% nonetwork
begingate
8 -28 beginpath
3 -18 3 -15 0 0 curveto
-3 -15 -3 -18 -8 -28 curveto
-2 -26 2 -26 8 -28 curveto
249
1.000 endpath
endgate
} def


%%EndSetup

%%Page: offset_conv_principle 1
%%PageOrientation: Portrait
/pgsave save def bop
% 32.00 4.00 gridspace
1.0000 inchscale
2.6000 setlinewidth 416 518 translate

1 1.500 0 -256 256 -256 2 polygon
1 1.500 0 -256 0 -160 2 polygon
1.000 0 0 -144 generic::arrowhead
1.000 90 272 -256 generic::arrowhead
1 1.500 0 -128 256 -128 2 polygon
1 1.500 0 -128 0 -32 2 polygon
1.000 0 0 -16 generic::arrowhead
1.000 90 272 -128 generic::arrowhead
1 1.500 0 0 256 0 2 polygon
1 1.500 0 0 0 96 2 polygon
1.000 0 0 112 generic::arrowhead
1.000 90 272 0 generic::arrowhead
1 1.500 0 128 256 128 2 polygon
1 1.500 0 128 0 224 2 polygon
1.000 0 0 240 generic::arrowhead
1.000 90 272 128 generic::arrowhead
1 1.500 16 -240 32 -240 32 -192 48 -192 48 -240 176 -240 176 -192 192 -192 192
-240 240 -240 10 polygon
1 1.500 16 -112 32 -112 48 -112 48 -64 80 -64 80 -112 144 -112 144 -64 160 -64
160 -112 208 -112 208 -64 224 -64 224 -112 240 -112 15 polygon
1 1.500 16 16 32 16 32 80 80 80 80 16 96 16 112 16 112 80 160 80 160 16 176 16
176 80 192 80 192 16 224 16 224 80 240 80 240 16 18 polygon
1 1.500 16 144 32 144 32 224 80 224 80 144 96 144 96 224 160 224 176 224 176
144 192 144 192 224 224 224 224 144 240 144 15 polygon
(Vin) {/Helvetica cf} (D) {/Symbol cf} 4 16 0 1.000 -224 -16 label
(< 0) {/Helvetica cf} 2 16 0 1.000 -208 -208 label
(> 0) {/Helvetica cf} 2 16 0 1.000 -208 176 label
1 1.500 768 -260 768 220 2 polygon
1 1.500 736 -228 1248 -228 2 polygon
1.000 0 768 236 generic::arrowhead
1.000 90 1272 -228 generic::arrowhead
([mV]) {/Helvetica cf} 2 16 0 1.000 1040 -324 label
(Vin) {/Helvetica cf} (D) {/Symbol cf} 4 16 0 1.000 944 -324 label
(Probability [%]) {/Helvetica cf} 2 16 0 0.750 784 204 label
1 1.500 1184 -228 864 156 1248 156 800 -228 spline
5 1.500 992 -148 768 -148 2 polygon
5 1.500 1024 -36 768 -36 2 polygon
5 1.500 1056 76 768 76 2 polygon
0.500 90 1056 -196 generic::arrowhead
0.500 270 992 -196 generic::arrowhead
1 1.500 1032 -196 1048 -196 2 polygon
(offset) {ss} {/Helvetica cf} (s) {/Symbol cf} 5 16 0 1.000 1096 -200 label
5 1.500 1056 76 1056 -228 2 polygon
5 1.500 992 -148 992 -228 2 polygon
1 1.500 1032 -196 1000 -196 2 polygon
(offset) {/Helvetica cf} 2 16 0 0.800 976 -260 label
5 1.500 1024 -36 1024 -236 2 polygon
1 1.500 1024 -236 1024 -220 2 polygon
0 1.500 392 224 392 -256 608 -256 608 224 4 polygon
496 1.500 -112 -260 -112 188 -88 188 -88 -260 4 polygon
497 1.500 -128 188 -72 188 -100 236 -128 188 4 polygon
(Time [ns]) {/Helvetica cf} 2 16 0 1.000 32 -320 label
(Processing) {/Helvetica-Oblique cf} 2 16 0 0.900 428 264 label
(50%) {/Helvetica cf} 2 16 0 1.000 684 -48 label
(84%) {/Helvetica cf} 2 16 0 1.000 688 64 label
(16%) {/Helvetica cf} 2 16 0 1.000 688 -160 label
1 1.000 496 -32 32 0.000 360.000 xcarc
1 1.000 496 -20 496 -44 2 polygon
1 1.000 484 -32 508 -32 2 polygon
1 1.000 528 -32 576 -32 2 polygon
1 1.000 544 -32 544 32 2 polygon
1 1.000 464 -32 420 -32 2 polygon
1 1.000 468 -16 448 0 448 32 3 polygon
(-1) {Ss} (z) {/Helvetica cf} 4 16 0 0.750 480 20 label
0 1.000 464 52 464 12 528 12 528 52 4 polygon
1 1.000 448 32 464 32 2 polygon
1 1.000 528 32 544 32 2 polygon
0.750 90 588 -32 generic::arrowhead
0.750 135 468 -16 generic::arrowhead
(Vin\)) {/Helvetica cf} (D) {/Symbol cf} (Latch Output\()
{/Helvetica-Oblique cf} 6 16 0 0.900 -16 264 label
497 1.000 784 -224 4 0.000 360.000 xcarc
497 1.000 796 -228 4 0.000 360.000 xcarc
497 1.000 812 -228 4 0.000 360.000 xcarc
497 1.000 832 -228 4 0.000 360.000 xcarc
497 1.000 848 -224 4 0.000 360.000 xcarc
497 1.000 868 -224 4 0.000 360.000 xcarc
497 1.000 888 -216 4 0.000 360.000 xcarc
497 1.000 908 -216 4 0.000 360.000 xcarc
497 1.000 924 -204 4 0.000 360.000 xcarc
497 1.000 944 -196 4 0.000 360.000 xcarc
497 1.000 960 -184 4 0.000 360.000 xcarc
497 1.000 980 -168 4 0.000 360.000 xcarc
497 1.000 996 -136 4 0.000 360.000 xcarc
497 1.000 1016 -92 4 0.000 360.000 xcarc
497 1.000 1032 12 4 0.000 360.000 xcarc
497 1.000 1052 64 4 0.000 360.000 xcarc
497 1.000 1080 104 4 0.000 360.000 xcarc
497 1.000 1108 124 4 0.000 360.000 xcarc
497 1.000 1128 140 4 0.000 360.000 xcarc
497 1.000 1160 144 4 0.000 360.000 xcarc
497 1.000 1196 156 4 0.000 360.000 xcarc
497 1.000 1228 156 4 0.000 360.000 xcarc
497 1.000 1248 156 4 0.000 360.000 xcarc
497 1.000 1024 -16 4 0.000 360.000 xcarc
497 1.000 1032 -12 4 0.000 360.000 xcarc
497 1.000 1012 -72 4 0.000 360.000 xcarc
497 1.000 1004 -112 4 0.000 360.000 xcarc
(Curve Fitting and Extraction) {/Helvetica-Oblique cf} 2 16 0 0.900 760 264
label
0.800 0.800 0.800 scb
305 1.000 648 288 660 272 648 256 660 256 672 272 660 288 648 288 7 polygon
305 1.000 316 288 328 272 316 256 328 256 340 272 328 288 316 288 7 polygon
sce
(+) {/Helvetica cf} 2 16 0 1.000 1068 -196 label
(-) {/Helvetica cf} 2 16 0 1.000 1068 -216 label
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
