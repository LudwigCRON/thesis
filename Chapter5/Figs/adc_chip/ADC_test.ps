%!PS-Adobe-3.0 EPSF-3.0
%%Title: ADC_test.ps
%%Creator: XCircuit v3.8 rev17
%%CreationDate: Mon Dec 11 15:39:45 2017
%%Pages: 1
%%BoundingBox: 68 68 595 277
%%DocumentNeededResources: font Helvetica Symbol 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.8
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--11/1/10  (tim.edwards@multigig.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-2012)
%
%%BeginResource: procset XCIRCproc 3.8 0
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } def
/ol { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/MR { /twidth exch def } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg
	/rotval exch def /twidth 100000 def /just exch def just 384 and
	0 gt {/mshow {pop} def} {/mshow {show} def} ifelse just 16 and 0
	gt {gsave rotval rotate 0 1 dtransform gsave pagemat setmatrix
	idtransform exch grestore 1 0 dtransform gsave pagemat setmatrix
	idtransform exch grestore dup abs 1e-9 lt {pop mul 0 gt} {3 1 roll
	pop pop 0 lt} ifelse grestore {-1 /rotval rotval neg def /just just
	dup 3 and 1 ne {3 xor} if def} {1} ifelse exch -1e-9 lt {-1 /rotval
	rotval neg def /just just dup 12 and 4 ne {12 xor} if def} {1}
	ifelse scale } if /showflag 0 def /fspc pspc def /Bline 0 def /Tabs
	0 array def /fscale 1.0 def /kY 0 def gsave dup 1 add copy dup
	1 0 dtransform exch atan rotate {exch dup type /stringtype eq {gsave
        dup gsave newpath 0 0 moveto true charpath flattenpath pathbbox pop
	exch pop exch pop grestore currentpoint pop add twidth
	ge {grestore CR exch 1 add dup 2 add {CR} exch 1 roll exch} {grestore}
	ifelse true charpath flattenpath} {dup type /arraytype eq {exec} {12
	string cvs true charpath flattenpath} ifelse} ifelse} repeat exch pop
	pathbbox grestore 3 -1 roll pop 3 1 roll just 1 and 0 gt {just 2 and
	0 gt {exch pop neg fspc sub} {exch sub 0.5 mul neg} ifelse} {pop neg
	fspc add} ifelse exch Bline exch just 4 and 0 gt {just 8 and 0 gt
	{exch pop neg fspc sub} {add 0.5 mul neg} ifelse} {pop neg fspc add}
	ifelse rotval rotate Kn currentpoint translate /showflag 1 def /Bline
	0 def /Tabs 0 array def /fscale 1.0 def /kY 0 def {dup type
	/stringtype eq {mshow} {dup type /arraytype eq {exec} {12 string cvs
	mshow} ifelse} ifelse} repeat grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce translate 0 0 moveto neg rotate dup type /nametype
	eq not { dup abs currentlinewidth exch div setlinewidth } { pop }
	ifelse dup abs scale clipped 1 and 1 eq {/clipped clipped 1 add def}
	if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap 0 setlinejoin} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt 
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def     

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 2 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog

% XCircuit output starts here.

%%BeginSetup


%%EndSetup

%%Page: ADC_test 1
%%PageOrientation: Portrait
/pgsave save def bop
% 32.00 8.00 gridspace
1.0000 inchscale
2.6000 setlinewidth 264 344 translate

{/Helvetica cf} 1 16 0 1.000 -32 24 label
(charac<1:0>) {/Helvetica cf} 2 16 0 0.600 536 264 label
(DS) {/Symbol cf} (I) {/Helvetica cf} 4 16 0 1.000 104 128 label
1 1.000 200 120 224 136 200 152 200 120 4 polygon
1 1.000 216 144 232 144 232 168 216 168 4 polygon
1 1.000 216 176 216 160 2 polygon
1 1.000 208 176 208 160 2 polygon
1 1.000 208 168 192 168 192 144 200 144 4 polygon
(sd_swincmp) {/Helvetica cf} 2 16 0 0.600 272 192 label
(sd_noreset) {/Helvetica cf} 2 16 0 0.600 136 192 label
1 1.000 216 128 232 128 232 104 216 104 4 polygon
1 1.000 216 96 216 112 2 polygon
1 1.000 208 96 208 112 2 polygon
1 1.000 208 104 192 104 192 128 200 128 4 polygon
1 1.000 232 168 264 168 2 polygon
1 1.000 232 104 264 104 2 polygon
1 1.000 320 128 320 112 336 120 320 128 4 polygon
1 1.000 320 160 320 144 336 152 320 160 4 polygon
1 1.000 332 148 2 0.000 360.000 xcarc
1 1.000 332 116 2 0.000 360.000 xcarc
1 1.000 330 156 340 156 2 polygon
1 1.000 334 148 340 148 2 polygon
1 1.000 330 124 340 124 2 polygon
1 1.000 334 116 340 116 2 polygon
0 1.000 96 80 96 208 416 208 416 80 4 polygon
1 1.000 320 208 320 224 2 polygon
1 1.000 320 224 328 232 328 248 312 248 312 232 320 224 6 polygon
1 1.000 192 208 192 224 200 232 200 248 184 248 184 232 192 224 7 polygon
1 1.000 56 112 24 112 16 120 0 120 0 104 16 104 24 112 7 polygon
1 1.000 56 176 24 176 16 184 0 184 0 168 16 168 24 176 7 polygon
1 1.000 56 176 96 176 2 polygon
1 1.000 56 112 96 112 2 polygon
(inp) {ss} (V) {/Helvetica cf} 4 16 0 1.000 -72 168 label
(inm) {ss} (V) {/Helvetica cf} 4 16 0 1.000 -72 104 label
(cycle6) {/Helvetica cf} 2 16 0 0.400 104 352 label
{/Helvetica cf} 1 16 0 1.000 648 256 label
0 1.000 96 384 96 320 416 320 416 384 4 polygon
(synchronizer) {/Helvetica cf} 2 16 0 0.600 216 344 label
0 1.000 576 208 576 80 864 80 864 208 4 polygon
(Algo) {/Helvetica cf} 2 16 0 1.000 656 128 label
0 1.000 576 208 576 80 640 80 640 208 4 polygon
(input select) {/Helvetica cf} 2 16 90 0.300 624 168 label
1 1.000 480 128 576 128 2 polygon
1 1.000 480 96 576 96 2 polygon
1 1.000 576 128 568 136 576 128 568 120 4 polygon
1 1.000 576 96 568 104 2 polygon
1 1.000 576 96 568 88 2 polygon
1 1.000 576 160 544 160 536 168 520 168 520 152 536 152 544 160 7 polygon
1 1.000 576 192 544 192 536 200 520 200 520 184 536 184 544 192 7 polygon
(inp) {ss} (V) {/Helvetica cf} 4 16 0 1.000 440 192 label
(inm) {ss} (V) {/Helvetica cf} 4 16 0 1.000 440 152 label
1 1.000 480 128 416 128 2 polygon
1 1.000 480 96 416 96 2 polygon
1 1.000 608 208 608 224 616 232 616 248 600 248 600 232 608 224 7 polygon
(charac<1:0>) {/Helvetica cf} 2 16 0 0.600 984 264 label
0 1.000 1024 208 1024 80 1312 80 1312 208 4 polygon
0 1.000 1024 208 1024 80 1088 80 1088 208 4 polygon
(input select) {/Helvetica cf} 2 16 90 0.300 1072 176 label
1 1.000 928 128 1024 128 2 polygon
1 1.000 928 96 1024 96 2 polygon
1 1.000 1024 128 1016 136 1024 128 1016 120 4 polygon
1 1.000 1024 96 1016 104 2 polygon
1 1.000 1024 96 1016 88 2 polygon
1 1.000 1024 160 992 160 984 168 968 168 968 152 984 152 992 160 7 polygon
1 1.000 1024 192 992 192 984 200 968 200 968 184 984 184 992 192 7 polygon
(inp) {ss} (V) {/Helvetica cf} 4 16 0 1.000 888 192 label
(inm) {ss} (V) {/Helvetica cf} 4 16 0 1.000 888 152 label
1 1.000 928 128 864 128 2 polygon
1 1.000 928 96 864 96 2 polygon
1 1.000 1056 208 1056 224 1064 232 1064 248 1048 248 1048 232 1056 224 7 
polygon
(SAR) {/Helvetica cf} 2 16 0 1.000 1120 128 label
(01) {/Helvetica cf} 2 16 0 0.600 584 168 label
(else) {/Helvetica cf} 2 16 0 0.500 584 104 label
(10) {/Helvetica cf} 2 16 0 0.600 1032 168 label
(else) {/Helvetica cf} 2 16 0 0.500 1032 104 label
1 1.000 736 -120 752 -96 720 -96 736 -120 4 polygon
1 1.000 736 -120 736 -152 744 -144 736 -152 728 -144 5 polygon
1 1.000 736 -128 768 -128 768 -80 744 -80 744 -96 5 polygon
1 1.000 728 -96 728 -64 2 polygon
1 1.000 688 -120 704 -96 672 -96 688 -120 4 polygon
1 1.000 688 -120 688 -152 696 -144 688 -152 680 -144 5 polygon
1 1.000 688 -128 656 -128 656 -80 680 -80 680 -96 5 polygon
1 1.000 696 -96 696 -64 2 polygon
1 1.000 696 -64 696 -48 688 -32 3 polygon
1 1.000 688 -32 688 -8 2 polygon
1 1.000 704 -32 704 -8 2 polygon
1 1.000 728 -64 728 -48 720 -32 3 polygon
1 1.000 720 -32 720 -8 2 polygon
1 1.000 736 -32 736 -8 2 polygon
1 1.000 688 -8 504 -8 504 128 3 polygon
1 1.000 720 -8 720 16 528 16 528 96 4 polygon
1 1.000 736 -8 920 -8 920 128 3 polygon
1 1.000 896 96 896 8 704 8 704 -8 4 polygon
4 1.000 656 -24 656 -56 768 -56 768 -24 4 polygon
1 1.000 656 -40 624 -40 616 -32 600 -32 600 -48 616 -48 624 -40 7 polygon
1 1.000 96 336 64 336 56 344 40 344 40 328 56 328 64 336 7 polygon
1 1.000 256 320 256 208 264 216 256 208 248 216 5 polygon
1 1.000 416 352 736 352 736 208 744 216 736 208 728 216 6 polygon
1 1.000 736 352 1152 352 1152 208 1160 216 1152 208 1144 216 6 polygon
1 1.000 96 368 64 368 56 376 40 376 40 360 56 360 64 368 7 polygon
(start) {/Helvetica cf} 2 16 0 0.400 104 368 label
1 1.000 96 352 64 352 56 360 40 360 40 344 56 344 64 352 7 polygon
(bufres<1:0>) {/Helvetica cf} 2 16 0 0.600 464 -48 label
(dyntest) {/Helvetica cf} 2 16 0 0.400 104 336 label
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
